from typing import Any, Optional, Text, List, Tuple, Dict


class PynamoDBException(Exception):
    msg: str
    cause: Any
    def __init__(self, msg: Optional[Text] = ..., cause: Optional[Exception] = ...) -> None: ...
    @property
    def cause_response_code(self) -> Optional[str]: ...
    @property
    def cause_response_message(self) -> Optional[str]: ...


class TransactError(PynamoDBException):
    def __init__(self, transact_items: Optional[List[Dict]] = ..., *args, **kwargs) -> None: ...
    @property
    def cancel_reasons(self) -> Optional[List[Tuple[Dict, Optional[str]]]]: ...
    @staticmethod
    def _get_reason_list_from_message(message: Optional[str]) -> Optional[str]: ...
    def parse_cancel_reasons(self, transact_items: List[Dict]) -> Optional[List[Tuple]]: ...


class PynamoDBConnectionError(PynamoDBException): ...
class DeleteError(PynamoDBConnectionError): ...
class QueryError(PynamoDBConnectionError): ...
class ScanError(PynamoDBConnectionError): ...
class PutError(PynamoDBConnectionError): ...
class UpdateError(PynamoDBConnectionError): ...
class GetError(PynamoDBConnectionError): ...
class TableError(PynamoDBConnectionError): ...
class DoesNotExist(PynamoDBException): ...
class TransactWriteError(PynamoDBException): ...
class TransactGetError(TransactError): ...
class InvalidStateError(TransactError): ...


class TableDoesNotExist(PynamoDBException):
    def __init__(self, table_name) -> None: ...

class VerboseClientError(Exception):
    MSG_TEMPLATE: Any
    def __init__(self, error_response, operation_name, verbose_properties: Optional[Any] = ...) -> None: ...
